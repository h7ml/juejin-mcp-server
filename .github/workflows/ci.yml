name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 8.15.0
        run_install: false

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Check lockfile
      run: |
        chmod +x scripts/check-lockfile.sh
        ./scripts/check-lockfile.sh

    - name: Install dependencies
      run: |
        if [ -f pnpm-lock.yaml ]; then
          echo "Found pnpm-lock.yaml, installing with frozen lockfile"
          pnpm install --frozen-lockfile
        else
          echo "No pnpm-lock.yaml found, installing without frozen lockfile"
          pnpm install
        fi
      
    - name: Type check
      run: pnpm run typecheck

    - name: Format check
      run: pnpm run format:check

    - name: Build
      run: pnpm run build

    - name: Run tests
      run: pnpm run test:all
      
    - name: Upload coverage reports
      if: matrix.node-version == '20.x'
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        
  build-test:
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 8.15.0
        run_install: false
        
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'
      
    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Check lockfile
      run: |
        chmod +x scripts/check-lockfile.sh
        ./scripts/check-lockfile.sh

    - name: Install dependencies
      run: |
        if [ -f pnpm-lock.yaml ]; then
          echo "Found pnpm-lock.yaml, installing with frozen lockfile"
          pnpm install --frozen-lockfile
        else
          echo "No pnpm-lock.yaml found, installing without frozen lockfile"
          pnpm install
        fi

    - name: Build
      run: pnpm run build:clean
      
    - name: Test built package
      run: |
        pnpm pack
        pnpm install -g ./juejin-mcp-server-*.tgz
        juejin-mcp-server --help || echo "Package installed successfully"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-files
        path: dist/
        retention-days: 7
